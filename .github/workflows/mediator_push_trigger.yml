name: Mediator Maven Package and docker upon a push

on:
  push:
    paths:
      - mediator/**
    branches:
      - '!release-branch'
      - release-1*
      - master
      - 1.*
      - develop
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        ref: ${{ github.ref }}
        java-version: 11
        
    - name: Setup branch and env
      run: |
          # Strip git ref prefix from version
          echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
     
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-${{ env.BRANCH_NAME }}
    
    - name: Build Mediator with Maven
      run: |
        cd mediator
        mvn -B clean package

    - name: Ready the springboot artifacts
      run: find -name '*.jar' -type f  -exec zip release.zip {} +

    - name: Upload the springboot jars
      uses: actions/upload-artifact@v1
      with:
        name: release
        path: ./release.zip

  docker-opencrvs-mediator:
    needs: build
    runs-on: ubuntu-latest
    env:
      NAMESPACE: ${{ secrets.dev_namespace_docker_hub }}
      SERVICE_NAME: mosip-opencrvs-mediator
      SERVICE_LOCATION: mediator
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v1
        with:
          name: release
          path: ./

      - name: Setup branch and version
        run: |
          # Strip git ref prefix from version
          echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
          
      - name: Get version info from pom
        id: getPomVersion
        uses: mavrosxristoforos/get-xml-info@1.0
        with:
          xml-file: ./${{ env.SERVICE_LOCATION }}/pom.xml 
          xpath: /*[local-name()="project"]/*[local-name()="version"] 
      
      - name: Unzip and extract the resident-service
        run: unzip -uj "release.zip" "${{ env.SERVICE_LOCATION }}/target/*" -d "./${{ env.SERVICE_LOCATION }}/target"
      
      - name: Build image
        run: |
          cd "./${{env.SERVICE_LOCATION}}"
          docker build . --file Dockerfile --tag ${{ env.SERVICE_NAME }}
          
      - name: Log into registry
        run: echo "${{ secrets.release_docker_hub }}" | docker login -u ${{ secrets.actor_docker_hub }} --password-stdin
        
      - name: Push image
        run: |
          IMAGE_ID=$NAMESPACE/$SERVICE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo "push version ${{steps.getPomVersion.outputs.info}}"
          if [[ $BRANCH_NAME == main || $BRANCH_NAME == master ]]; then
            VERSION=latest
          else
            VERSION=$BRANCH_NAME
          fi
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $SERVICE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
